{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_StylePanel = _resolveComponent(\"StylePanel\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_StylePanel, {\n    onBold: _cache[0] || (_cache[0] = $event => $options.format('bold')),\n    onItalic: _cache[1] || (_cache[1] = $event => $options.format('italic')),\n    onList: _cache[2] || (_cache[2] = $event => $options.format('insertunorderedlist')),\n    onListOl: _cache[3] || (_cache[3] = $event => $options.format('insertorderedlist')),\n    onFontSize: $options.textSize,\n    onFontName: $options.font,\n    onTextColor: $options.textColor,\n    onBackColor: $options.backColor,\n    onAlignLeft: _cache[4] || (_cache[4] = $event => $options.format('justifyLeft')),\n    onAlignCenter: _cache[5] || (_cache[5] = $event => $options.format('justifyCenter')),\n    onAlignRight: _cache[6] || (_cache[6] = $event => $options.format('justifyRight')),\n    onSubscript: _cache[7] || (_cache[7] = $event => $options.format('subscript')),\n    onSuperscript: _cache[8] || (_cache[8] = $event => $options.format('superscript')),\n    onLink: $options.link,\n    onUnlink: _cache[9] || (_cache[9] = $event => $options.format('unlink')),\n    onUnderline: _cache[10] || (_cache[10] = $event => $options.format('underline')),\n    onSave: _cache[11] || (_cache[11] = $event => $options.saveDocument())\n  }, null, 8\n  /* PROPS */\n  , [\"onFontSize\", \"onFontName\", \"onTextColor\", \"onBackColor\", \"onLink\"]), _createElementVNode(\"div\", {\n    class: \"editorfield\",\n    ref: \"editorfield\",\n    insert: true,\n    contenteditable: \"true\",\n    onKeydown: _cache[12] || (_cache[12] = $event => $options.keyPress($event)),\n    spellcheck: \"false\"\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  )], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;6DACIA,aAGyBC,qBAHzB,EAGyB;AAHZC,UAAI,sCAAEC,gBAAM,MAAN,CAAF,CAGQ;AAHWC,YAAM,sCAAED,gBAAM,QAAN,CAAF,CAGjB;AAHsCE,UAAI,sCAAEF,gBAAM,qBAAN,CAAF,CAG1C;AAH4EG,YAAO,sCAAEH,gBAAM,mBAAN,CAAF,CAGnF;AAHmHI,cAAS,EAAEJ,iBAG9H;AAHyIK,cAAS,EAAEL,aAGpJ;AAFxBM,eAAU,EAAEN,kBAEY;AAFAO,eAAU,EAAEP,kBAEZ;AAFwBQ,eAAU,sCAAER,gBAAM,aAAN,CAAF,CAElC;AAF4DS,iBAAY,sCAAET,gBAAM,eAAN,CAAF,CAExE;AAFoGU,gBAAW,sCAAEV,gBAAM,cAAN,CAAF,CAE/G;AADxBW,eAAS,sCAAEX,gBAAM,WAAN,CAAF,CACe;AADSY,iBAAW,sCAAEZ,gBAAM,aAAN,CAAF,CACpB;AAD8Ca,UAAI,EAAEb,aACpD;AAD2Dc,YAAM,sCAAEd,gBAAM,QAAN,CAAF,CACjE;AADsFe,eAAS,wCAAEf,gBAAM,WAAN,CAAF,CAC/F;AAAxBgB,UAAI,wCAAEhB,uBAAF;AAAoB,GAHzB;;AAAA,2EAIAiB,oBAEM,KAFN,EAEM;AAFDC,SAAK,EAAC,aAEL;AAFmBC,OAAG,EAAC,aAEvB;AAFsCC,UAAM,EAAE,IAE9C;AAFoDC,mBAAe,EAAC,MAEpE;AAFgFC,aAAO,wCAAEtB,kBAASuB,MAAT,CAAF,CAEvF;AADNC,cAAU,EAAC;AACL,GAFN;;AAAA","names":["_createVNode","_component_StylePanel","onBold","$options","onItalic","onList","onListOl","onFontSize","onFontName","onTextColor","onBackColor","onAlignLeft","onAlignCenter","onAlignRight","onSubscript","onSuperscript","onLink","onUnlink","onUnderline","onSave","_createElementVNode","class","ref","insert","contenteditable","onKeydown","$event","spellcheck"],"sourceRoot":"","sources":["/home/ja/prace/js/vue-klauzury/src/components/EditorField.vue"],"sourcesContent":["<template>\n    <StylePanel @bold=\"format('bold')\" @italic=\"format('italic')\" @list=\"format('insertunorderedlist')\" @list-ol=\"format('insertorderedlist')\" @font-size=\"textSize\" @font-name=\"font\"\n    @text-color=\"textColor\" @back-color=\"backColor\" @align-left=\"format('justifyLeft')\" @align-center=\"format('justifyCenter')\" @align-right=\"format('justifyRight')\" \n    @subscript=\"format('subscript')\" @superscript=\"format('superscript')\" @link=\"link\" @unlink=\"format('unlink')\" @underline=\"format('underline')\"\n    @save=\"saveDocument()\" />\n    <div class=\"editorfield\" ref=\"editorfield\" :insert=\"true\" contenteditable=\"true\" v-on:keydown=\"keyPress($event)\"\n    spellcheck=\"false\"> \n    </div>\n</template>\n\n<script>\nimport StylePanel from '../components/StylePanel.vue'\n\nexport default {\n    name: 'EditorField',\n\n    components:{\n        StylePanel\n    },\n\n    data(){\n        return{\n            insert: true\n        }\n    },\n\n    methods: {\n    moveCaret(win, charCount) {\n    var sel;\n    if (win.getSelection) {\n        sel = win.getSelection();\n        if (sel.rangeCount > 0) {\n            var textNode = sel.focusNode;\n            var newOffset = sel.focusOffset + charCount;\n            sel.collapse(textNode, Math.min(textNode.length, newOffset));\n        }\n    } \n    },\n\n    saveDocument(){\n    var preHtml = \"\";\n    var postHtml = \"\";\n    var html = preHtml+this.$refs.editorfield.innerHTML+postHtml;\n\n    var blob = new Blob(['\\ufeff', html], {\n        type: 'application/msword'\n    });\n    \n    // Specify link url\n    var url = 'data:application/vnd.ms-word;charset=utf-8,' + encodeURIComponent(html);\n    \n    // Specify file name\n    let nameprompt = prompt(\"Please enter file name\")\n    if (nameprompt == null){\n        nameprompt = \"Document\"\n    }\n\n    let filename = nameprompt+'.doc'\n    \n    // Create download link element\n    var downloadLink = document.createElement(\"a\");\n\n    document.body.appendChild(downloadLink);\n    \n    if(navigator.msSaveOrOpenBlob ){\n        navigator.msSaveOrOpenBlob(blob, filename);\n    }else{\n        // Create a link to the file\n        downloadLink.href = url;\n        \n        // Setting the file name\n        downloadLink.download = filename;\n        \n        //triggering the function\n        downloadLink.click();\n    }\n    \n    document.body.removeChild(downloadLink);\n    },\n\n    delete(what){\n        if (what == \"all\"){\n            this.$refs.editorfield.innerHTML = \"\"\n        }\n    },\n\n    loadImage()\n{\nvar inputFileToLoad = document.createElement(\"input\");\ninputFileToLoad.type = \"file\";\ninputFileToLoad.id = \"inputFileToLoad\";\ndocument.body.appendChild(inputFileToLoad);\n\nvar buttonLoadFile = document.createElement(\"button\");\nbuttonLoadFile.onclick = loadImageFileAsURL;\nbuttonLoadFile.textContent = \"Load Selected File\";\ndocument.body.appendChild(buttonLoadFile);\n},\n\nloadImageFileAsURL()\n{\nvar filesSelected = document.getElementById(\"inputFileToLoad\").files;\nif (filesSelected.length > 0)\n{\n    var fileToLoad = filesSelected[0];\n\n    if (fileToLoad.type.match(\"image.*\"))\n    {\n        var fileReader = new FileReader();\n        fileReader.onload = function(fileLoadedEvent) \n        {\n            var imageLoaded = document.createElement(\"img\");\n            imageLoaded.src = fileLoadedEvent.target.result;\n            document.body.appendChild(imageLoaded);\n        };\n        fileReader.readAsDataURL(fileToLoad);\n    }\n}\n},\n\n        keyPress(e){\n            if (this.insert == true){\n                switch(e.keyCode){\n                    case 73: \n                    e.preventDefault()\n                    alert(\"Insert mode\")\n                    this.insert = false\n                    break;\n\n                    case 72:\n                    e.preventDefault() \n                    this.moveCaret(window, -1)\n                    break;\n\n                    case 76:\n                    e.preventDefault()\n                    this.moveCaret(window, +1)\n                    break;\n\n                    case 88:\n                    e.preventDefault()\n                    this.format('forwardDelete')\n                    break;\n\n                    case 9:\n                    e.preventDefault()\n                    let command = prompt(\"Write the command here:\")\n                    switch(command){\n                        case \"bold\":\n                        this.format('bold')\n                        break;\n\n                        case \"italic\":\n                        this.format('italic')\n                        break;\n                    \n                        case \"list\":\n                        this.format('insertunorderedlist')\n                        break;\n\n                        case \"textsize\":\n                        let size = prompt(\"Write the text size here (1-7):\")\n                        if (size < 1 || size > 7){\n                            alert(\"This is not an option!\")\n                        }\n                        else{\n                            this.textSize(size)\n                        }\n                        break;\n\n                        case \"font\":\n                        let fontName = prompt(\"Write the font here (Arial, Helvetica, Times New Roman, Courier New, Archivo Narrow, Roboto):\")\n                        if (fontName == \"Arial\" || fontName == \"Helvetica\" || fontName == \"Times New Roman\" || fontName == \"Courier New\" || fontName == \"Archivo Narrow\" || \n                        fontName == \"Roboto\"){\n                            this.font(fontName)\n                        }\n                        else{\n                            alert(\"This is not an option!\")\n                        }\n                        break;\n\n                        case \"listol\":\n                        this.format('insertorderedlist')\n                        break;\n\n                        case \"textcolor\":\n                        let colorname = prompt(\"Write the color here (Yellow, Green, Blue, Violet, Red, Orange, Black, Gray, Brown, White):\")\n                        this.colorSwitch(colorname, true)\n                        break;\n\n                        case \"backcolor\":\n                        let backcolorname = prompt(\"Write the color here (Yellow, Green, Blue, Violet, Red, Orange, Black, Gray, Brown, White):\")\n                        this.colorSwitch(backcolorname, false)\n                        break;\n\n                        case \"alignleft\":\n                        this.format('justifyLeft')\n                        break;\n\n                        case \"aligncenter\":\n                        this.format('justifyCenter')\n                        break;\n\n                        case \"alignright\":\n                        this.format('justifyRight')\n                        break;\n\n                        case \"subscript\":\n                        this.format('subscript')\n                        break;\n\n                        case \"superscript\":\n                        this.format('superscript')\n                        break;\n\n                        case \"link\":\n                        this.link()\n                        break;\n\n                        case \"unlink\":\n                        this.format('unlink')\n                        break;\n\n                        case \"underline\":\n                        this.format('underline')\n                        break;\n\n                        case \"wq\":\n                        this.saveDocument()\n                        break;\n\n                        case \"qa\":\n                        let what = \"all\"\n                        this.delete(what)\n                        break;\n\n                        default:\n                        alert(\"This is not a command!\")\n                    }\n\n                    case 37:\n                    break;\n\n                    case 38:\n                    break;\n\n                    case 39:\n                    break;\n\n                    case 40:\n                    break;\n\n                    default: \n                    e.preventDefault()\n                }\n            }\n            else if (this.insert == false){\n                if (e.keyCode == 27){\n                    alert(\"Normal mode\")\n                    this.insert = true\n                }\n            }\n        },\n\n    format(command, value) {\n    document.execCommand(command, false, value)\n },\n    \n    textSize(size){\n        document.execCommand(\"fontSize\", false, size)\n    },\n\n    font(fontName){\n        document.execCommand(\"fontName\", false, fontName)\n    },\n\n    textColor(textcolor){\n        document.execCommand(\"foreColor\", false, textcolor)\n    },\n\n    backColor(backcolor){\n        document.execCommand(\"backColor\", false, backcolor)\n    },\n\n    link(){\n        let url = prompt(\"Write the URL here:\")\n        this.format('createLink', url)\n    },\n\n    colorSwitch(colorname, textcolor){\n        let colorcode\n\n            switch(colorname){\n                case \"Yellow\":\n                colorcode = \"ffff00\"\n                break;\n\n                case \"Green\":\n                colorcode = \"#008000\"\n                break;\n\n                case \"Blue\":\n                colorcode = \"#0000ff\"\n                break;\n\n                case \"Violet\":\n                colorcode = \"#ee82ee\"\n                break;\n\n                case \"Red\":\n                colorcode = \"#ff0000\"\n                break;\n\n                case \"Orange\":\n                colorcode = \"#ffa500\"\n                break;\n\n                case \"Black\":\n                colorcode = \"#000000\"\n                break;\n\n                case \"Gray\":\n                colorcode = \"#808080\"\n                break;\n\n                case \"Brown\":\n                colorcode = \"#8b4513\"\n                break;\n\n                case \"White\":\n                colorcode = \"#ffffff\"\n                break;\n\n                default: \n                alert(\"This is not an option!\")\n                }\n            if (textcolor == true){    \n            this.textColor(colorcode)\n            }\n            else if (textcolor == false){\n            this.backColor(colorcode)    \n            }\n    },\n       }\n    }\n</script>\n\n<style scoped>\n    .editorfield{\n        padding: 5px;\n        display: block;\n        margin: auto;\n        resize: none;\n        outline: none;\n        border: 2px solid black;\n        width: 1250px;\n        height: 1000px;\n        word-wrap: break-word;\n    }\n</style>"]},"metadata":{},"sourceType":"module"}