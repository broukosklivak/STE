{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_StylePanel = _resolveComponent(\"StylePanel\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_StylePanel, {\n    onBold: _cache[0] || (_cache[0] = $event => $options.format('bold')),\n    onItalic: _cache[1] || (_cache[1] = $event => $options.format('italic')),\n    onList: _cache[2] || (_cache[2] = $event => $options.format('insertunorderedlist')),\n    onListOl: _cache[3] || (_cache[3] = $event => $options.format('insertorderedlist')),\n    onFontSize: $options.textSize,\n    onFontName: $options.font,\n    onTextColor: $options.textColor\n  }, null, 8\n  /* PROPS */\n  , [\"onFontSize\", \"onFontName\", \"onTextColor\"]), _createElementVNode(\"div\", {\n    class: \"editorfield\",\n    insert: true,\n    contenteditable: \"true\",\n    onKeydown: _cache[4] || (_cache[4] = $event => $options.keyPress($event)),\n    spellcheck: \"false\"\n  }, null, 32\n  /* HYDRATE_EVENTS */\n  )], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;6DACIA,aAC0BC,qBAD1B,EAC0B;AADbC,UAAI,sCAAEC,gBAAM,MAAN,CAAF,CACS;AADUC,YAAM,sCAAED,gBAAM,QAAN,CAAF,CAChB;AADqCE,UAAI,sCAAEF,gBAAM,qBAAN,CAAF,CACzC;AAD2EG,YAAO,sCAAEH,gBAAM,mBAAN,CAAF,CAClF;AADkHI,cAAS,EAAEJ,iBAC7H;AADwIK,cAAS,EAAEL,aACnJ;AAAzBM,eAAU,EAAEN;AAAa,GAD1B;;AAAA,kDAEAO,oBAEM,KAFN,EAEM;AAFDC,SAAK,EAAC,aAEL;AAFoBC,UAAM,EAAE,IAE5B;AAFkCC,mBAAe,EAAC,MAElD;AAF8DC,aAAO,sCAAEX,kBAASY,MAAT,CAAF,CAErE;AADNC,cAAU,EAAC;AACL,GAFN;;AAAA","names":["_createVNode","_component_StylePanel","onBold","$options","onItalic","onList","onListOl","onFontSize","onFontName","onTextColor","_createElementVNode","class","insert","contenteditable","onKeydown","$event","spellcheck"],"sourceRoot":"","sources":["/home/ja/prace/js/vue-klauzury/src/components/EditorField.vue"],"sourcesContent":["<template>\n    <StylePanel @bold=\"format('bold')\" @italic=\"format('italic')\" @list=\"format('insertunorderedlist')\" @list-ol=\"format('insertorderedlist')\" @font-size=\"textSize\" @font-name=\"font\"\n    @text-color=\"textColor\" />\n    <div class=\"editorfield\" :insert=\"true\" contenteditable=\"true\" v-on:keydown=\"keyPress($event)\"\n    spellcheck=\"false\">\n    </div>\n</template>\n\n<script>\nimport StylePanel from '../components/StylePanel.vue'\n\nexport default {\n    name: 'EditorField',\n\n    components:{\n        StylePanel\n    },\n\n    data(){\n        return{\n            insert: true\n        }\n    },\n\n    methods: {\n    moveCaret(win, charCount) {\n    var sel;\n    if (win.getSelection) {\n        sel = win.getSelection();\n        if (sel.rangeCount > 0) {\n            var textNode = sel.focusNode;\n            var newOffset = sel.focusOffset + charCount;\n            sel.collapse(textNode, Math.min(textNode.length, newOffset));\n        }\n    } \n    },\n\n        keyPress(e){\n            if (this.insert == true){\n                switch(e.keyCode){\n                    case 73: \n                    e.preventDefault()\n                    alert(\"Insert mode\")\n                    this.insert = false\n                    break;\n\n                    case 72:\n                    e.preventDefault() \n                    this.moveCaret(window, -1)\n                    break;\n\n                    case 76:\n                    e.preventDefault()\n                    this.moveCaret(window, 1)\n                    break;\n\n                    case 9:\n                    e.preventDefault()\n                    let command = prompt(\"Write the command here:\")\n                    switch(command){\n                        case \"bold\":\n                        this.format('bold')\n                        break;\n\n                        case \"italic\":\n                        this.format('italic')\n                        break;\n                    \n                        case \"list\":\n                        this.format('insertunorderedlist')\n                        break;\n\n                        case \"textsize\":\n                        let size = prompt(\"Write the text size here (1-7):\")\n                        this.textSize(size)\n                        break;\n\n                        case \"font\":\n                        let fontName = prompt(\"Write the font here (Arial, Helvetica, Times New Roman, Courier New, Archivo Narrow, Roboto):\")\n                        this.font(fontName)\n                        break;\n\n                        case \"listol\":\n                        this.format('insertorderedlist')\n                        break;\n\n                        case \"textcolor\":\n                        let colorname = prompt(\"Write the color here (Yellow, Green, Blue, Violet, Red, Orange, Black, Gray, Brown, White):\")\n                        this.colorSwitch(colorname)\n                        break;\n\n                        default:\n                        alert(\"This is not a command!\")\n                    }\n\n                    case 37:\n                    break;\n\n                    case 38:\n                    break;\n\n                    case 39:\n                    break;\n\n                    case 40:\n                    break;\n\n                    default: \n                    e.preventDefault()\n                }\n            }\n            else if (this.insert == false){\n                if (e.keyCode == 27){\n                    alert(\"Normal mode\")\n                    this.insert = true\n                }\n            }\n        },\n\n    format(command, value) {\n    document.execCommand(command, false, value)\n },\n    \n    textSize(size){\n        document.execCommand(\"fontSize\", false, size)\n    },\n\n    font(fontName){\n        document.execCommand(\"fontName\", false, fontName)\n    },\n\n    textColor(textcolor){\n        document.execCommand(\"foreColor\", false, textcolor)\n    },\n\n    colorSwitch(colorname){\n        let colorcode\n\n            switch(colorname){\n                case \"Yellow\":\n                colorcode = \"ffff00\"\n                break;\n\n                case \"Green\":\n                colorcode = \"#008000\"\n                break;\n\n                case \"Blue\":\n                colorcode = \"#0000ff\"\n                break;\n\n                case \"Violet\":\n                colorcode = \"#ee82ee\"\n                break;\n\n                case \"Red\":\n                colorcode = \"#ff0000\"\n                break;\n\n                case \"Orange\":\n                colorcode = \"#ffa500\"\n                break;\n\n                case \"Black\":\n                colorcode = \"#000000\"\n                break;\n\n                case \"Gray\":\n                colorcode = \"#808080\"\n                break;\n\n                case \"Brown\":\n                colorcode = \"#8b4513\"\n                break;\n\n                case \"White\":\n                colorcode = \"#ffffff\"\n                break;\n\n                default: \n                alert(\"This is not an option!\")\n                }\n            this.textColorComplete(colorcode)\n    },\n\n    textColorComplete(colorcode){\n        this.textColor(colorcode)\n    }\n        }\n    }\n</script>\n\n<style scoped>\n    .editorfield{\n        padding: 5px;\n        display: block;\n        margin: auto;\n        resize: none;\n        outline: none;\n        border: 2px solid black;\n        width: 1250px;\n        height: 1000px;\n        word-wrap: break-word;\n    }\n</style>"]},"metadata":{},"sourceType":"module"}